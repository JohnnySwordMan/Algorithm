/**
 * 矩阵最小路径问题
 * 有一个矩阵map，它的每个格子有一权值。从左上角的格子开始每次只能向右或向下走，最后达到右下角的位置，路径上所有的数字累加起来就是路径和，
 * 返回所有的路径中最小的路径和。 给定一个矩阵map及它的行数n和列数m，请返回最小路径和。保证行列数均小于等于100.
 * 
 * @author geyan
 *
 */
public class MinimunPath {
	/**
	 * 假设map矩阵为
	 * 1 3 5 9
	 * 8 1 3 4
	 * 5 0 6 1
	 * 8 8 4 0
	 * 
	 * dp[i][j]表示从左上角，也就是(0,0)位置，走到(i,j)位置的最小路径和。
	 * 如果dp[i][j]是最小路径，那么前面一步也必定是最小路径。
	 * 计算出第一行和第一列
	 * 1 4 9 18
	 * 9
	 * 14
	 * 22
	 * ----------
	 * 1 4 9 18
	 * 9 5
	 * 14 5 11 12
	 * 22      12
	 */
	public int getMin(int[][] map, int n, int m) {
		int[][] dp = new int[n][m];
		dp[0][0] = map[0][0];
		// 计算第一行和第一列
		for (int i = 1; i < m; i++) {
			dp[0][i] = dp[0][i - 1] + map[0][i];
		}
		for (int i = 1; i < n; i++) {
			dp[i][0] = dp[i - 1][0] + map[i][0];
		}
		for (int i = 1; i < n; i++) {
			for (int j = 1; j < m; j++) {
				dp[i][j] = map[i][j] + Math.min(dp[i - 1][j], dp[i][j - 1]);
			}
		}
		return dp[n - 1][m - 1];
	}
}
